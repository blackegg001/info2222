<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
}

nav {
    width: 100%;
    padding: 10px 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

h1 {
    color: #333;
    font-size: 24px;
    text-align: left;
    margin: 20px 0;
}

main {
    display: flex;
    justify-content: space-between;
    width: 90%;
    margin-top: 20px;
}

section {
    padding: 10px;
    background: #f0f0f0;
    border-radius: 5px;
    margin: 10px;
}

#message_box, #chat_box {
    flex: 1;
}

#friend_list, #deletefriend, #accept_or_reject {
    flex: 1;
    margin: 0 20px;
}

#friendreqlist {
    flex: 1;
}

.text {
    font-size: 16px;
    color: #333;
    margin-bottom: 5px;
}

input {
    width: 100%;
    padding: 8px;
    margin: 5px 0;
    box-sizing: border-box;
}

button {
    width: 100%;
    padding: 10px;
    margin-top: 10px;
    background-color: #0074D9;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

ul {
    list-style: none;
    padding: 0;
}

li {
    padding: 5px;
    border-bottom: 1px solid #ddd;
}

li:last-child {
    border-bottom: none;

.top-section {
    display: flex;
    width: 100%; 
}

.left-column {
    display: flex;
    flex-direction: column;
}
}


</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- Top section for logout and repository -->
    <div class="top-section">
        <div class="left-column">
            <section id="logout">
                <p class="text">logout</p>
                <button onclick="logout()">logout</button>
            </section>

            <section id="repository">
                <p class="text">knowledge repository</p>
                <button style="margin-bottom: 20px" onclick="repository()">enter</button>
            </section>
        </div>
    </div>
    

    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section>
        <section id="chat_box">
            <p class="text">Chat with: </p>
            <input id="receiver" placeholder="username">
            <!-- MDN says its bad practice to use the onclick attribute,
            but we're using it anyways coz its easy :)-->
            <button onclick="join_room()">Chat</button>
        </section>

        <!-- The (message) input box is set to display: none initially, 
        this means the input box is "invisible" initially-->
        <section id="input_box" style="display: none" >
            <p class="text">Message: </p>
            <input id="message" placeholder="message">
            <button onclick="send()">Send</button>
            <button onclick="leave()">Leave Room</button>
        </section>
    </section>

    <section>
        <section id = "friend_list">
            <p class="text">Friendlist: </p>
            <ul>
            {% for i in friend_list %}
            <li>{{ i }}</li> 
            {% endfor %}
            </ul>
        </section>
        <section id = "deletefriend">
            <p class="text">delete friend: </p>
            <input id= "deletewho" placeholder="username">
            <button onclick="unfriend()">unfriend</button>

        </section>
    </section>

    
    <section>
        <section id = "friendreqlist">
            <p class="text">Friend Requests: </p>
            <ul>
            {% for i in friend_req_list %}
            <li>{{ i }}</li> 
            {% endfor %}
            </ul>
        </section>

        <section id = "accept or reject">
            <p class="text">send friend request to: </p>
            <input id= "friendreq_receiver">
            <button onclick="send_friend_req()">Add friend</button>

            <p class="text">Accept friend request from: </p>
            <input id= "acceptfriendreq_receiver">
            <button onclick="acceptfriend_req()">Accept friend request</button>

            <p class="text">Reject friend request from: </p>
            <input id= "rejectfriendreq_receiver">
            <button onclick="rejectfriend_req()">Reject friend request</button>
        </section>
        
    </section>

    




<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";
    let role = "{{ role }}";
    let muted = "{{ muted }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    async function logout() {
        let repURL = "{{ url_for('logout_user') }}";
        res = await axios.post(repURL, {});
        window.open(res.data, "_self");
    }



    // we emit a join room event to the server to join a room
    function join_room() {
       
        let receiver = $("#receiver").val();

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    function send_friend_req() {
        let requsername = $("#friendreq_receiver").val();
        $("#friendreq_receiver").val("");
        socket.emit("requestfriend", username, requsername, (res) => {
            alert(res);
            window.navigate(location);
        });
    }

    function acceptfriend_req() {
        let message = $("#acceptfriendreq_receiver").val();
        $("#acceptfriendreq_receiver").val("");
        socket.emit("acceptfriend", message, username, (res) => {
            alert(res);
        });
    }

    function rejectfriend_req() {
        let message = $("#rejectfriendreq_receiver").val();
        $("#rejectfriendreq_receiver").val("");
        socket.emit("rejectfriend", message, (res) => {
            alert(res);
        });
    }
    
    function unfriend() {
        let message = $("#deletewho").val();
        $("#deletewho").val("");
        socket.emit("unfriend", username, message, (res) => {
            alert(res);
        });
    }

    async function repository() {
        let repURL = "{{ url_for('repository_user') }}";
        res = await axios.post(repURL, {
            username: username,
            role: role,
            muted: muted
        });
        window.open(res.data, "_self");
    }

    
    
</script>
{% endblock %}
