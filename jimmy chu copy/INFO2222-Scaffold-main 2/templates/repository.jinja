{% extends 'base.jinja' %}


{% block content %} 
<style>
    $('#outerBox').empty();
    header {
        padding: 0px;
        text-align: center;
        font-size: 30px;
        color: green;
    }

    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }
    button:hover{
        cursor: pointer;
    }
    

    .parallel_display {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    }

    .parallel_display > section {
    flex-basis: 40%; 
    }


    .outerBox {
    display: inline-block;
    display: grid;
    grid-template-columns: auto auto auto;
    padding: 10px;
    }

    .innerBox {
    display: grid;
    grid-template-columns: auto;
    padding: 10px;
    }

     .box-item {
    border: 1px solid rgba(0, 0, 0, 0.8);
    padding: 20px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
    <ol style="float: left">
        <li style="display:inline-block"></li>
        <button onclick="logout()">logout </button>
    </ol>
    <ol style="margin-left: 200px">
        <button onclick="message_app()">Switch to chat</button>
    </ol>
</nav>


<header>
  <h2>Knowledge repository </h2>
</header>


<main>
    <button id="loadArticlesButton" style = "margin-bottom: 20px">Load articles</button>
    <section id="Make_article">
        <p class="text">Write an article: </p>
        <button id = 'addBoxButton' onclick="writeStart()">Write</button>
    </section>

    <textarea id="Write_title" style="height: 100px; width: 500px; display: none" placeholder="Write the title of article"></textarea>
    <button style="display: none" id="saveButton" onclick=saveTitle() >Save Title</button>
    <textarea id="Write_article" style="height: 100px; width: 500px; display: none" placeholder="Write an article"></textarea>
    <button type="submit" formaction="/submit_article" style="display: none" onclick="articleEnd()" id="saveArticle">Save</button>
    <button type="submit" formaction="/submit_article" style="display: none" onclick="articleEnd()" id="saveArticleAno">Save Anonymously</button>

    <section id="Comment_choice">
        <p class="text">Comment on whose article: </p>
        <input id="commentChoice" placeholder="Enter the id">
        <button onclick="commentStart()">Comment</button>
    </section>

    <textarea id="Write_comment" style="display: none; height: 100px; width: 500px; " placeholder="Write the comment of article"></textarea>
    <button type="submit" formaction="/submit_comment" id="saveComment" style="display: none" onclick="commentEnd()" >Comment</button>
    <button type="submit" formaction="/submit_comment" style="display: none" onclick="commentEnd()" id="saveCommentAno">Comment Anonymously</button>

    <div class="parallel_display" style="margin-top: 20px">
        <section id="Modify_choice">
            <p class="text">Modify which article? Enter the id  </p>
            <input id="modifyChoice" placeholder="Enter the id">
            <button onclick="modifyStart()">Start modify</button>
        </section>

        <section id="Modify_box" style="display: none" >
            <textarea id="Write_modify" placeholder='Write the modified content. Copy and paste for your convenience' style="height: 100px; width: 500px;" ></textarea>
            <button type="submit" formaction="/modify_title" id = "modifyTitle">Modify title</button>
            <button type="submit" formaction="/modify_article" id = "modifyArticle">Modify article</button>
        </section>

    </div>

    <div class="parallel_display">

        <section id="Delete_choice">
            <p class="text">Delete which article? Enter the id  </p>
            <input id="deleteChoice"  placeholder="username">
            <button type="submit" formaction="/delete_article"   id="deleteArticle">delete article</button>
            <button type="submit" formaction="/delete_comment"  id="deleteComment">delete comment</button>
        </section>


        <section id="Mute_choice">
            <p class="text">Enter the username to mute/unmute: </p>
            <input id="muteChoice" placeholder="username">
            <button type="submit" formaction="/mute" id="muteUser" >Mute</button>
            <button type="submit" formaction="/unmute" id="unmuteUser" >Unmute</button>
        </section>

    </div>

    <div class="outerBox" id="outerBox">
    </div>




    



<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    const titleContainer = document.getElementById('Write_title');
    const articleContainer = document.getElementById('Write_article');
    const commentContainer = document.getElementById('Write_comment');
    const modifyContainer = document.getElementById('Write_modify');
    const commentChoiceContainer = document.getElementById('commentChoice');
    const modifyChoiceContainer = document.getElementById('modifyChoice');
    const deleteChoiceContainer = document.getElementById('deleteChoice');
    const muteChoiceContainer = document.getElementById('muteChoice');
    let username = "{{username}}";
    let role = "{{role}}";
    let muted = "{{muted}}";
    let permission = true;
    if (role == "student") {
        permission = false;
    }
    if (role == "academic") {
        permission = false;
    }
    let userTitle = ''; 
    let articleContent = '';
    let commentChoice = '';
    let commentContent = '';
    let deleteChoice = '';
    let modifyChoice = '';
    let modifyContent = '';
    let muteChoice = '';
    titleContainer.addEventListener('input', function() {
        userTitle = titleContainer.value; 
    });

    articleContainer.addEventListener('input', function() {
        const userInputValue = articleContainer.value;
        const lines = userInputValue.split('\n');
        articleContent = lines.join('<br>'); 
    });
    commentChoiceContainer.addEventListener('input', function() {
        commentChoice = commentChoiceContainer.value;
    });
    modifyChoiceContainer.addEventListener('input', function() {
        modifyChoice = modifyChoiceContainer.value;
    });
    deleteChoiceContainer.addEventListener('input', function() {
        deleteChoice = deleteChoiceContainer.value;
    });
    muteChoiceContainer.addEventListener('input', function() {
        muteChoice = muteChoiceContainer.value;
    });
    commentContainer.addEventListener('input', function() {
        const userInputValue = commentContainer.value;
        const lines = userInputValue.split('\n');
        commentContent = lines.join('<br>');
    });
    modifyContainer.addEventListener('input', function() {
        const userInputValue = modifyContainer.value;
        const lines = userInputValue.split('\n');
        modifyContent = lines.join('<br>');
    });

        
    function writeStart() {
        $("#Make_article").hide();
        $("#Write_title").show();
        $("#saveButton").show();
        
    }
    function saveTitle() {
        $("#Write_title").hide();
        $("#Write_article").show();
        $("#saveButton").hide();
        $("#saveArticle").show(); 
        $("#saveArticleAno").show(); 
    }
    function articleEnd() {
        $("#Write_article").hide();
        $("#saveArticle").hide(); 
        $("#saveArticleAno").hide(); 
        $("#Make_article").show();
        
    }
    
    function commentStart() {
        $("#Comment_choice").hide();
        $("#Write_comment").show();
        $("#saveComment").show();
        $("#saveCommentAno").show();
    }

    function commentEnd() {
        $("#Write_comment").hide();
        $("#saveComment").hide(); 
        $("#saveComment").hide();
        $("#Comment_choice").show();
        
    } 

    function deleteStart() {
        $("#Delete_choice").hide();
        $("#Delete_box").show();
    }

    function modifyStart() {
        $("#Modify_choice").hide();
        $("#Modify_box").show();
    }

    function modifyEnd() {
        $("#Modify_choice").show();
        $("#Modify_box").hide();
    }

    async function message_app() {
        let msgURL = "{{ url_for('msg_user') }}";
        res = await axios.post(msgURL, {username: username, muted : muted});
        window.open(res.data, "_self");
    }

    async function logout() {
        let repURL = "{{ url_for('logout_user') }}";
        res = await axios.post(repURL, {});
        window.open(res.data, "_self");
    }

    document.getElementById('saveArticle').addEventListener('click', async () => {
        const author = username;
        if (muted === "False") {
            try {
                const response = await fetch('/submit_article', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ author, userTitle, articleContent }),
                });

                if (response.ok) {
                    console.log('Article submitted successfully!');
                } else {
                    console.error('Error submitting article:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
        } else {
            alert("You have been muted")
        }
    });

    document.getElementById('saveArticleAno').addEventListener('click', async () => {
        const author = "Anonymous";
        if (muted === "False") {
            try {
                const response = await fetch('/submit_article', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ author, userTitle, articleContent }),
                });

                if (response.ok) {
                    console.log('Article submitted successfully!');
                } else {
                    console.error('Error submitting article:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
        } else {
            alert("You have been muted")
        }
    });

    document.getElementById('saveComment').addEventListener('click', async () => {
        const author = username;
        if (muted === "False") {
            try {
                const response = await fetch('/submit_comment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ author, commentChoice, commentContent }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
            
        } else {
            alert("You have been muted")
        }
        
    });

    document.getElementById('saveCommentAno').addEventListener('click', async () => {
        const author = "Anonymous";
        if (muted === "False") {
            try {
                const response = await fetch('/submit_comment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ author, commentChoice, commentContent }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
            
        } else {
            alert("You have been muted")
        }
        
    });

    document.getElementById('modifyTitle').addEventListener('click', async () => {
        modifyEnd()
        if (muted === true) {
            alert("You have been muted")
        }
        else if (permission || articleDictionary[modifyChoice] === username) {
            try {
                const response = await fetch('/modify_title', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, modifyChoice, modifyContent }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
        } else {
            alert("You have no permission to modify others' title")
        }
    });

    document.getElementById('modifyArticle').addEventListener('click', async () => {
        modifyEnd()
        if (muted === "True") {
            alert("You have been muted")
        }
        else if (permission || articleDictionary[modifyChoice] === username) {
            try {
                const response = await fetch('/modify_article', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, modifyChoice, modifyContent }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }

        } else{
            alert("You have no permission to modify others' article")
        }
        
    });

    document.getElementById('deleteArticle').addEventListener('click', async () => {
        if (muted === true) {
            alert("You have been muted")
        }
        else if (permission){
            try {
                const response = await fetch('/delete_article', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ deleteChoice }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
        }   else{
            alert("You have no permission to delete article")
        }
        
    });

    

    document.getElementById('deleteComment').addEventListener('click', async () => {
        if (muted === true) {
            alert("You have been muted")
        }
        else if (permission) {
            try {
                const response = await fetch('/delete_comment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ deleteChoice }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }

        } else{
            alert("You have no permission to delete comment")
        }
        
    });

    document.getElementById('muteUser').addEventListener('click', async () => {
        if (muted === true) {
            alert("You have been muted")
        }
        else if (permission){
            try {
                const response = await fetch('/mute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ muteChoice }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
        }   else{
            alert("You have no permission to mute user")
        }
        
    });

    document.getElementById('unmuteUser').addEventListener('click', async () => {
        if (muted === true) {
            alert("You have been muted")
        }
        else if (permission){
            try {
                const response = await fetch('/unmute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ muteChoice }),
                });

                if (response.ok) {
                    console.log('Comment submitted successfully!');
                } else {
                    console.error('Error submitting comment:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error.message);
            }
        }   else{
            alert("You have no permission to unmute user")
        }
        
    });
    
    const articleDictionary = {};
    let boxCount = 0
    $(document).ready(function() {
        // When the button is clicked
        $('#loadArticlesButton').click(function() {
            // Make an AJAX request to your Python function
            $.ajax({
                type: 'GET',
                url: '/get_articles', // Replace with your actual URL
                success: function(data) {
                    $('#outerBox').empty();
                    // Iterate through titles, usernames, and content
                    for (let i = 0; i < data.title.length; i++) {
                        articleDictionary[data.article_id[i]] = data.userName[i];
                        // Create a new inner box
                        const boxContainer = document.getElementById('outerBox');
                        const newBox = document.createElement('div');
                        newBox.classList.add('innerBox');
                        let boxItemId = `box${boxCount}`;
                        let commentId = `comment${boxCount}`;
                        let box_article_id = `${data.article_id}`;
                        // Set the IDs for the box item and comment elements
                        const boxItem = document.createElement('div');
                        boxItem.classList.add('box-item');
                        boxItem.id = boxItemId;
                        const comment = document.createElement('div');
                        comment.classList.add('box-item');
                        comment.id = commentId;
                        // Append the box item and comment to the new inner box
                        newBox.appendChild(boxItem);
                        newBox.appendChild(comment);
                        // Append the new inner box to the container
                        boxContainer.appendChild(newBox);
                        boxCount++;
                        const listItem = document.createElement('li');
                        listItem.style.listStyle = "none";
                        listItem.innerHTML = `
                            <p id=box_article_id style="float: right; float: top; margin-bottom: 10px;">ID:${data.article_id[i]}</p>
                            <h3 style="text-align: center; font-size: 15px; margin-bottom: 10px;"><strong>${data.title[i]}</strong></h3>
                            <p id="author" style="text-align: right; margin-bottom: 10px;">Written by user ${data.userName[i]}</p>
                            <p>${data.content[i]}</p>
                            <button class="btn1">like</button> <button class="btn2">dislike</button>
                        `;
                        document.getElementById(boxItemId).appendChild(listItem);
                        for (let j = 0; j < data.comment[i].length; j++) {
                            const commentItem = document.createElement('p');
                            commentItem.innerHTML = `<p style="float: right; float: top; margin-bottom: 10px;">ID:${data.commentId[i][j]}</p>
                            <h3 style="text-align: center; font-size: 15px; margin-bottom: 10px;"><strong>Comment by  ${data.commentName[i][j]}</strong></h3>
                            <p>${data.comment[i][j]}</p>
                            <button class="btn1">like</button> <button class="btn2">dislike</button>
                            `;
                            document.getElementById(commentId).appendChild(commentItem);
                        }
                    }
                    var btn1 = document.querySelector('.btn1');
                    var btn2 = document.querySelector('.btn2');
                    var addnum = 0;
                    btn1.addEventListener('click',function(){
                        ++addnum;
                        btn1.textContent = "like+"+addnum;
                    })
                    var stepnum = 0;
                    btn2.addEventListener('click',function(){
                        --stepnum;
                        btn2.textContent = "dislike"+stepnum;
                    })
                },
                error: function(xhr, status, error) {
                    $('#outerBox').empty();
                    console.error('Error fetching articles:', error);
                }
            });
        });
    });


    
    
    
</script>

{% endblock %}